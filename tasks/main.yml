- name: "Combine variables"
  set_fact:
    linux_accounts_users: "{{ linux_accounts_default_users | combine(linux_accounts_additional_users) }}"
    linux_accounts_sudo_users: "{{ linux_accounts_default_sudo_users + linux_accounts_additional_sudo_users }}"

- name: "Install sudo package"
  apt:
    pkg: "sudo"
    state: "present"
    update_cache: yes
    cache_valid_time: 3600

- name: Enable passwordless sudo
  template:
    src: "passwordless-sudo.j2"
    dest: "/etc/sudoers.d/passwordless-sudo"
    owner: root
    group: root
    mode: "770"

- name: "Ensure group {{ linux_accounts_group }} exists"
  group:
    name: "{{ linux_accounts_group }}"
    state: present

- name: "Create user accounts"
  user:
    name: "{{ item.key }}"
    shell: "/bin/bash"
    groups: "{{ linux_accounts_group }}"
    append: yes
  loop: "{{ lookup('ansible.builtin.dict', linux_accounts_users) }}"

- name: Grant sudo privileges
  user:
    name: "{{ item }}"
    groups: sudo
    append: yes
  loop: "{{ linux_accounts_sudo_users }}"

- name: Get sudo group informations
  getent:
    database: group
    key: sudo

- name: "Get users in sudo group"
  set_fact:
    users_in_sudo_group: "{{ ansible_facts.getent_group['sudo'][2] | split(',') }}"

- name: "Set accounts to revoke sudo permissions"
  set_fact:
    sudo_to_be_removed: "{{ users_in_sudo_group | difference(linux_accounts_sudo_users) }}"

- name: "Revoke sudo permissions"
  include_tasks: revoke-sudo.yml
  loop: "{{ sudo_to_be_removed | difference(linux_accounts_sudo_users) }}"
  loop_control:
    loop_var: user

- name: "Create .ssh directory for user accounts"
  file:
    path: "~{{ item.key }}/.ssh"
    state: directory
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
    mode: 0700
  loop: "{{ lookup('ansible.builtin.dict', linux_accounts_users) }}"

- name: Add authorized key for user accounts
  copy:
    content: "{{ item.value | join('\n') }}\n"
    dest: "~{{ item.key }}/.ssh/authorized_keys"
    owner: "{{ item.key }}"
    group: "{{ item.key }}"
  loop: "{{ lookup('ansible.builtin.dict', linux_accounts_users) }}"

- name: Get group informations
  ansible.builtin.getent:
    database: group
    split: ":"

- name: "Get users in {{ linux_accounts_group }} group"
  set_fact:
    users_in_group: "{{ ansible_facts.getent_group[linux_accounts_group][2] | split(',') }}"

- name: "Set accounts to be removed"
  set_fact:
    accounts_to_be_removed: "{{ users_in_group | difference(linux_accounts_users.keys()|list) }}"

- name: "Remove accounts"
  user:
    name: "{{ item }}"
    state: absent
  loop: "{{ accounts_to_be_removed | difference(linux_accounts_to_keep) }}"
